pipeline {
    agent any

    environment {
        DOCKER_REGISTRY = credentials('DOCKER_REGISTRY')
        GITHUB_USERNAME = credentials('GITHUB_USERNAME')
        IMAGE_TAG       = "${env.BUILD_NUMBER}"
    }

     stages {
            stage('Gradle Build') {
                steps {
                    sh 'chmod +x ./gradlew'
                    sh './gradlew clean buildAll'
                }
            }

            stage('Build Docker Images') {
                steps {
                    sh """
                        docker build -t ${DOCKER_REGISTRY}/bank-ui:${IMAGE_TAG} bank-ui
                        docker build -t ${DOCKER_REGISTRY}/accounts-service:${IMAGE_TAG} accounts
                        docker build -t ${DOCKER_REGISTRY}/blocker-service:${IMAGE_TAG} blocker
                        docker build -t ${DOCKER_REGISTRY}/cash-service:${IMAGE_TAG} cash
                        docker build -t ${DOCKER_REGISTRY}/exchange-service:${IMAGE_TAG} exchange
                        docker build -t ${DOCKER_REGISTRY}/exchange-generator-service:${IMAGE_TAG} exchange-generator
                        docker build -t ${DOCKER_REGISTRY}/gateway-api:${IMAGE_TAG} gateway-api
                        docker build -t ${DOCKER_REGISTRY}/notifications-service:${IMAGE_TAG} notifications
                        docker build -t ${DOCKER_REGISTRY}/transfer-service:${IMAGE_TAG} transfer
                        """
                }
            }

            stage('Push Docker Images') {
                steps {
                    withCredentials([string(credentialsId: 'GHCR_TOKEN', variable: 'GHCR_TOKEN')]) {
                        sh """
                        echo \$GHCR_TOKEN | docker login ghcr.io -u ${GITHUB_USERNAME} --password-stdin
                        docker push ${DOCKER_REGISTRY}/bank-ui:${IMAGE_TAG}
                        docker push ${DOCKER_REGISTRY}/accounts-service:${IMAGE_TAG}
                        docker push ${DOCKER_REGISTRY}/blocker-service:${IMAGE_TAG}
                        docker push ${DOCKER_REGISTRY}/cash-service:${IMAGE_TAG}
                        docker push ${DOCKER_REGISTRY}/exchange-service:${IMAGE_TAG}
                        docker push ${DOCKER_REGISTRY}/exchange-generator-service:${IMAGE_TAG}
                        docker push ${DOCKER_REGISTRY}/gateway-api:${IMAGE_TAG}
                        docker push ${DOCKER_REGISTRY}/notifications-service:${IMAGE_TAG}
                        docker push ${DOCKER_REGISTRY}/transfer-service:${IMAGE_TAG}
                        """
                    }
                }
            }

            stage('Add Helm Repo') {
                steps {
                    sh """
                    helm repo add bitnami https://charts.bitnami.com/bitnami
                    helm repo update
                    """
                }
            }

            stage('Helm Deploy') {
                steps {
                    sh """
                    echo "Building Helm dependencies..."
                    helm dependency build ./bank-app

                    echo "Installing Helm chart: bank-app..."
                    helm install bank-app ./bank-app

                    echo "Looking for a pod with name containing 'bank-ui'..."
                    BANK_UI_POD=$(kubectl get pods --no-headers -o custom-columns=":metadata.name" | grep bank-ui | head -n 1)

                    if [ -z "\$BANK_UI_POD" ]; then
                      echo "No pod found with name containing 'bank-ui'"
                      exit 1
                    fi

                    echo "Found pod: \$BANK_UI_POD"
                    echo "Waiting for pod \$BANK_UI_POD to be Ready..."

                    for i in {1..30}; do
                      READY=$(kubectl get pod "\$BANK_UI_POD" -o jsonpath='{.status.conditions[?(@.type=="Ready")].status}')
                      if [ "\$READY" == "True" ]; then
                        echo "Pod \$BANK_UI_POD is Ready."
                        break
                      fi
                      echo "Pod not ready yet... (\$i/30)"
                      sleep 10
                    done

                    if [ "\$READY" != "True" ]; then
                      echo "Pod \$BANK_UI_POD did not become Ready in time."
                      exit 1
                    fi

                    echo "Forwarding port from pod to localhost:8088..."
                    kubectl port-forward pod/"\$BANK_UI_POD" 8088:8080 &
                    PORT_FORWARD_PID=$!

                    echo "Opening app in browser at http://localhost:8088..."
                    if command -v xdg-open > /dev/null; then
                        xdg-open http://localhost:8088
                    elif command -v open > /dev/null; then
                        open http://localhost:8088
                    else
                        echo "Could not detect browser opener. Please open manually: http://localhost:8088"
                    fi

                    echo "Press Ctrl+C to stop port-forwarding and exit."
                    wait \$PORT_FORWARD_PID
                    """
                }
            }
        }

        post {
            failure {
                echo 'Pipeline failed!'
            }
            success {
                echo 'Pipeline completed successfully!'
            }
        }
}