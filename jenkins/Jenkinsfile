pipeline {
    agent any

    environment {
        DOCKER_REGISTRY = credentials('DOCKER_REGISTRY')
        GITHUB_USERNAME = credentials('GITHUB_USERNAME')
        IMAGE_TAG       = "${env.BUILD_NUMBER}"
    }

     stages {
            stage('Gradle Build') {
                steps {
                    sh 'chmod +x ./gradlew'
                    sh './gradlew clean buildAll'
                }
            }

            stage('Build Images') {
                steps {
                    sh '''
                    chmod +x ./build_images.sh
                    ./build_images.sh
                    '''
                }
            }

            stage('Add Helm Repo') {
                steps {
                    sh """
                    helm repo add bitnami https://charts.bitnami.com/bitnami
                    helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
                    helm repo add grafana https://grafana.github.io/helm-charts
                    helm repo update
                    """
                }
            }

            stage('Wait for Ingress Controller') {
                steps {
                    sh '''#!/bin/bash
                    set -e
                    kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/main/deploy/static/provider/cloud/deploy.yaml
                    kubectl get pods -n ingress-nginx
                    kubectl get svc -n ingress-nginx
                    echo "Waiting for Ingress NGINX pods to be ready..."
                    kubectl wait --namespace ingress-nginx \
                    --for=condition=Ready pods \
                    --selector=app.kubernetes.io/component=controller \
                    --timeout=120s
                    kubectl get pods -n ingress-nginx
                    kubectl get svc -n ingress-nginx
                    '''
                }
            }

            stage('Helm Cleanup') {
                steps {
                    sh '''#!/bin/bash
                    set -e
                    if helm status bank-app >/dev/null 2>&1; then
                      echo "Deleting existing Helm release: bank-app"
                      helm delete bank-app
                    else
                      echo "No existing Helm release named bank-app"
                    fi
                    '''
                }
            }

            stage('Helm Deploy') {
                steps {
                    sh '''
                    echo "Building Helm dependencies..."
                    helm dependency build ./bank-app

                    kubectl config view
                    echo "Installing Helm chart: bank-app..."
                    helm install bank-app ./bank-app --timeout 10m
                    '''
                }
            }

            stage('Wait for bank-ui Pod to be Ready') {
                steps {
                    sh '''#!/bin/bash
                    set -e

                    echo "Looking for a pod with name containing 'bank-ui'..."
                    BANK_UI_POD=$(kubectl get pods --no-headers -o custom-columns=":metadata.name" | grep bank-ui | head -n 1)

                    if [ -z "$BANK_UI_POD" ]; then
                      echo "No pod found with name containing 'bank-ui'"
                      exit 1
                    fi

                    echo "Found pod: $BANK_UI_POD"
                    echo "Waiting for pod $BANK_UI_POD to be Ready..."

                    for ((i=1; i<=30; i++)); do
                      READY=$(kubectl get pod "$BANK_UI_POD" -o jsonpath="{.status.conditions[?(@.type=='Ready')].status}")
                      if [ "$READY" == "True" ]; then
                        echo "Pod $BANK_UI_POD is Ready."
                        break
                      fi
                      echo "Pod not ready yet... ($i/30)"
                      sleep 10
                    done

                    if [ "$READY" != "True" ]; then
                      echo "Pod $BANK_UI_POD did not become Ready in time."
                      exit 1
                    fi
                    '''
                }
            }

            stage('Apply Ingress') {
                steps {
                    sh '''#!/bin/bash
                    set -e

                    echo "Ingress status:"
                    kubectl get ingress -n default

                    echo "Ingress Controller external IP:"
                    kubectl get svc ingress-nginx-controller -n ingress-nginx
                    '''
                }
            }
        }

        post {
            failure {
                echo 'Pipeline failed!'
            }
            success {
                echo 'Pipeline completed successfully!'
            }
        }
}