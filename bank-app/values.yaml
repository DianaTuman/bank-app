global:
  domain: myapp.local # Example domain for ingress

############################################# POSTGRES #############################################
accounts-db:
  enabled: true
  auth:
    database: practicum
    username: accounts_user
    password: "changeM3Customer!" # Example: Not recommended for production
  primary:
    persistence:
      enabled: true
      size: 1Gi

############################################# KEYCLOAK #############################################

bank-keycloak:
  auth:
    adminUser: admin
    adminPassword: admin

  postgresql:
    enabled: true
    auth:
      username: bn_keycloak
      password: bn_keycloak
      database: bitnami_keycloak

  extraEnvVars:
    - name: KEYCLOAK_ADMIN
      value: admin
    - name: KEYCLOAK_ADMIN_PASSWORD
      value: admin
    - name: KEYCLOAK_EXTRA_ARGS
      value: "--import-realm"

  extraVolumes:
    - name: realm-config
      configMap:
        name: keycloak-realm-config

  extraVolumeMounts:
    - name: realm-config
      mountPath: /opt/bitnami/keycloak/data/import
      readOnly: true

############################################# KAFKA #############################################

bank-kafka:
  replicaCount: 3

  kraft:
    enabled: true

  auth:
    enabled: false

  listeners:
    client:
      protocol: 'PLAINTEXT'
    controller:
      protocol: 'PLAINTEXT'

  externalAccess:
    enabled: false

  persistence:
    enabled: false

  provisioning:
    enabled: true
    topics:
      - name: bank-app.rates
        partitions: 1
        replicationFactor: 3
      - name: bank-app.notifications
        partitions: 1
        replicationFactor: 3
      - name: bank-app.logs
        partitions: 1
        replicationFactor: 3

  controller:
    resources:
      requests:
        cpu: 100m
        memory: 256Mi
      limits:
        cpu: 200m
        memory: 512Mi

  broker:
    resources:
      requests:
        cpu: 100m
        memory: 256Mi
      limits:
        cpu: 200m
        memory: 512Mi

############################################# ZIPKIN #############################################

bank-zipkin:
  enabled: true
  service:
    type: ClusterIP
    port: 9411

  cassandra:
    enabled: false
    tls:
      enabled: false
      autoGenerated:
        enabled: false

  storageType: memory

  persistence:
    enabled: false

  resources:
    limits:
      cpu: 500m
      memory: 512Mi
    requests:
      cpu: 250m
      memory: 256Mi

############################################# ELK #############################################

#bank-elasticsearch:
#  tls:
#    enabled: false
#  security:
#    enabled: false
#  replicas: 1
#  minimumMasterNodes: 1
#  resources:
#    requests:
#      cpu: "100m"
#      memory: "1Gi"
#    limits:
#      memory: "2Gi"
#  volumeClaimTemplate:
#    accessModes: [ "ReadWriteOnce" ]
#    resources:
#      requests:
#        storage: 5Gi

#bank-kibana:
#  kibanaHelmScripts:
#    preInstallScript: ""
#  service:
#    type: NodePort
#    nodePort: 32000
#  hooks:
#    enabled: false
#  elasticsearch:
#    scheme: http
#    hosts: "http://bank-app-bank-elasticsearch:9200"
#  extraEnvs:
#    - name: ELASTICSEARCH_USERNAME
#      value: elastic
#    - name: ELASTICSEARCH_PASSWORD
#      value: changeme

bank-logstash:
  replicaCount: 1
  logstashPipeline:
    logstash.conf: |
      input {
         kafka {
          bootstrap_servers => "bank-app-bank-kafka:9092"
          topics => ["bank-app.logs"]
          group_id => "bank-app"
          decorate_events => extended
        }
      }
      filter {
         mutate {
            copy => { "[@metadata][kafka][timestamp]" => "kafka_timestamp"
                      "[@metadata][kafka][partition]" => "partition" }
        }
      }
      output {
        stdout { codec => rubydebug }
        if [log-level] == "INFO" {
          file {
            path => "/var/data/yandex-logs/output/coffee-processed.txt"
          }
        } else if [log-level] == "DEBUG" {
          file {
            path => "/var/data/yandex-logs/output/coffee-errors.txt"
          }
        }
      }
  service:
    type: ClusterIP