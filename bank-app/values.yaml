global:
  domain: myapp.local # Example domain for ingress

############################################# POSTGRES #############################################
accounts-db:
  enabled: true
  auth:
    database: practicum
    username: accounts_user
    password: "changeM3Customer!" # Example: Not recommended for production
  primary:
    persistence:
      enabled: true
      size: 1Gi

############################################# KEYCLOAK #############################################

bank-keycloak:
  auth:
    adminUser: admin
    adminPassword: admin

  postgresql:
    enabled: true
    auth:
      username: bn_keycloak
      password: bn_keycloak
      database: bitnami_keycloak

  extraEnvVars:
    - name: KEYCLOAK_ADMIN
      value: admin
    - name: KEYCLOAK_ADMIN_PASSWORD
      value: admin
    - name: KEYCLOAK_EXTRA_ARGS
      value: "--import-realm"

  extraVolumes:
    - name: realm-config
      configMap:
        name: keycloak-realm-config

  extraVolumeMounts:
    - name: realm-config
      mountPath: /opt/bitnami/keycloak/data/import
      readOnly: true

############################################# KAFKA #############################################

bank-kafka:
  replicaCount: 3

  kraft:
    enabled: true

  auth:
    enabled: false

  listeners:
    client:
      protocol: 'PLAINTEXT'
    controller:
      protocol: 'PLAINTEXT'

  externalAccess:
    enabled: false

  persistence:
    enabled: false

  provisioning:
    enabled: true
    topics:
      - name: bank-app.rates
        partitions: 1
        replicationFactor: 3
      - name: bank-app.notifications
        partitions: 1
        replicationFactor: 3
      - name: bank-app.logs
        partitions: 1
        replicationFactor: 3

  controller:
    resources:
      requests:
        cpu: 100m
        memory: 256Mi
      limits:
        cpu: 200m
        memory: 512Mi

  broker:
    resources:
      requests:
        cpu: 100m
        memory: 256Mi
      limits:
        cpu: 200m
        memory: 512Mi

############################################# ZIPKIN #############################################

bank-zipkin:
  enabled: true
  service:
    type: ClusterIP
    port: 9411

  cassandra:
    enabled: false
    tls:
      enabled: false
      autoGenerated:
        enabled: false

  storageType: memory

  persistence:
    enabled: false

  resources:
    limits:
      cpu: 500m
      memory: 512Mi
    requests:
      cpu: 250m
      memory: 256Mi

############################################# ELK #############################################

bank-elasticsearch:
  replicas: 1
  minimumMasterNodes: 1
  security:
    enabled: true
  tls:
    enabled: false
  resources:
    requests:
      cpu: "100m"
      memory: "1Gi"
    limits:
      memory: "2Gi"
  volumeClaimTemplate:
    accessModes: [ "ReadWriteOnce" ]
    resources:
      requests:
        storage: 5Gi
  nodeGroup: "master"
  config:
    node.store.allow_mmap: false
    network.host: 0.0.0.0
    discovery.type: single-node

bank-logstash:
  replicaCount: 1
  logstashPipeline:
    logstash.conf: |
      input {
        kafka {
          bootstrap_servers => "bank-app-bank-kafka:9092"
          topics => ["bank-app.logs"]
          group_id => "bank-app"
          decorate_events => extended
        }
      }
      filter {
        mutate {
          copy => { "[@metadata][kafka][timestamp]" => "kafka_timestamp"
                    "[@metadata][kafka][partition]" => "partition" }
        }
      }
      output {
        stdout { codec => rubydebug }
        elasticsearch {
          hosts => ["https://elasticsearch-master:9200"]
          user => "${ELASTICSEARCH_USERNAME}"
          password => "${ELASTICSEARCH_PASSWORD}"
          cacert => "/usr/share/logstash/config/certs/ca.crt"
          index => "logs-bank-app"
          ssl => true
        }
      }

  service:
    type: ClusterIP
    ports:
      - name: beats
        port: 5044
        targetPort: 5044
      - name: http
        port: 9600
        targetPort: 9600

  extraEnvs:
    - name: ELASTICSEARCH_HOSTS
      value: "https://elasticsearch-master:9200"
    - name: ELASTICSEARCH_USERNAME
      valueFrom:
        secretKeyRef:
          name: elasticsearch-master-credentials
          key: username
    - name: ELASTICSEARCH_PASSWORD
      valueFrom:
        secretKeyRef:
          name: elasticsearch-master-credentials
          key: password

  extraVolumes:
    - name: es-certs
      secret:
        secretName: elasticsearch-master-certs

  extraVolumeMounts:
    - name: es-certs
      mountPath: /usr/share/logstash/config/certs
      readOnly: true

#bank-kibana:
#  replicaCount: 1
#
#  kibanaConfig:
#    kibana.yml: |
#      server.name: "bank-kibana"
#      server.host: "0.0.0.0"
#      elasticsearch.hosts: ["https://elasticsearch-master:9200"]
#      elasticsearch.username: "${ELASTICSEARCH_USERNAME}"
#      elasticsearch.password: "${ELASTICSEARCH_PASSWORD}"
#      elasticsearch.ssl.certificateAuthorities: ["/usr/share/kibana/config/certs/ca.crt"]
#      elasticsearch.ssl.verificationMode: full
#      monitoring.enabled: true
#      logging.dest: /usr/share/kibana/logs/kibana.log
#
#  service:
#    type: ClusterIP
#    ports:
#      - name: http
#        port: 5601
#        targetPort: 5601
#
#  extraEnvs:
#    - name: ELASTICSEARCH_USERNAME
#      valueFrom:
#        secretKeyRef:
#          name: elasticsearch-master-credentials
#          key: username
#    - name: ELASTICSEARCH_PASSWORD
#      valueFrom:
#        secretKeyRef:
#          name: elasticsearch-master-credentials
#          key: password
#
#  extraVolumes:
#    - name: es-certs
#      secret:
#        secretName: elasticsearch-master-certs
#
#  extraVolumeMounts:
#    - name: es-certs
#      mountPath: /usr/share/kibana/config/certs
#      readOnly: true
#
#  resources:
#    requests:
#      cpu: "500m"
#      memory: "1Gi"
#    limits:
#      cpu: "1"
#      memory: "2Gi"